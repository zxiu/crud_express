= cruds_express.to_json
%ul.nav.nav-tabs
  - cruds_express.each_with_index do |(model, v), i|
    %li{:class => i == 0 ? :active : nil}
      %a{"data-toggle" => "tab", :href => "#tab-#{model}"}
        = model
.tab-content
  - cruds_express.each_with_index do |(model, value), i|
    .tab-pane.fade{:id => "tab-#{model}", :class => i == 0 ? [:active, :in] : nil}
      %table.table
        %thead
          %tr
            - cruds_express[model][:columns].each do |column_name, prop|
              - hide = prop[:hide]
              - unless hide
                %td
                  = column_name
            %td
              .pull-right
                - show = value[:cruds].has_key?(:create)
                -# - crud = Hash.new
                -# - crud[:create] = Hash.new
                -# - crud[:create][:url] = url_for entry_list.url_for_params(:create, id: 0)
                -# - crud[:create][:method] = :post
                - if show
                  %button.btn.btn-danger.btn-sm{"data-target" => "#modal-#{model}", "data-toggle" => "modal", :type => "button",
                          :data => {:action => :create, :todo => :new, :model => model, :cruds => value[:cruds]}}
                    = "+"
        %tbody
      -#     - entry_list.each do |entry|
      -#       %tr
      -#         - entry_list.column_names.each do |column_name|
      -#           - value = entry.send(column_name)
      -#           - hidden = cruds_helper.hidden?(entry.model_name.to_s, column_name)
      -#           - unless hidden
      -#             %td
      -#               - case entry_list.cruds_type(column_name)
      -#               - when :enum
      -#                 %select{:disabled => true}
      -#                   - entry.defined_enums[column_name].each do |k, v|
      -#                     %option{:value => k, :selected => entry.send("#{k}?")}
      -#                       = k
      -#               - when :string
      -#                 = value
      -#               - when :date, :datetime, :timestamps
      -#                 = value.to_s(:long) unless value.blank?
      -#               - else
      -#                 = value
      -#         %td
      -#           .pull-right
      -#             - id = entry.send(:id)
      -#             - crud = Hash.new
      -#             - entry_list.cruds_ajax.each do |func, c|
      -#               - crud[func] = Hash.new
      -#               - crud[func][:url] = url_for entry_list.url_for_params(func, id: id)
      -#               - crud[func][:method] = c[:method]
      -#             %button.btn.btn-primary.btn-sm{"data-target" => "#model-#{table_name}", "data-toggle" => "modal", :type => "button",
      -#             :data => {:action => :update, :todo => :edit, :id => entry.send(:id), :crud => crud.to_json, :model => entry.model_name } }
      -#               = :Edit
      -# .modal.fade{:id => "model-#{table_name}", "aria-labelledby" => "model-#{table_name}-title", :role => "dialog", :tabindex => "-1"}
      -#   .modal-dialog{:role => "document"}
      -#     .modal-content
      -#       .modal-header
      -#         %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
      -#           %span{"aria-hidden" => "true"} Ã—
      -#         %h4.modal-title{:id => "model-#{table_name}-title"} Modal title
      -#       .modal-body
      -#         %form{:data => {:remote => true} }
      -#           - entry_list.column_names.each do |column_name|
      -#             - model_name = entry_list.first.model_name.to_s unless entry_list.blank?
      -#             - disabled = !cruds_helper.permit?(model_name, column_name)
      -#             - hidden = cruds_helper.hidden?(model_name, column_name)
      -#             - form_control_id = "model-#{table_name}-#{column_name}"
      -#             - clazz = disabled ? :hide : nil
      -#             - unless hidden
      -#               .form-group
      -#                 - unless disabled
      -#                   %label.control-label{:for => form_control_id}
      -#                     = "#{column_name}:"
      -#                 - case entry_list.cruds_type(column_name)
      -#                 - when :enum
      -#                   %select.form-control{:id => form_control_id, :disabled => disabled,
      -#                   :name => column_name, :class => clazz}
      -#                     - entry_list.defined_enums[column_name].each do |k, v|
      -#                       %option{:value => k}
      -#                         = k
      -#                 - when :string
      -#                   %input.form-control{:id => form_control_id, :type => "text", :disabled => disabled,
      -#                   :name => column_name, :class => clazz}
      -#                 - when :text
      -#                   %textarea.form-control{:id => form_control_id,
      -#                   :name => column_name, :class => clazz}
      -#                 - when :datetime, :timestamps
      -#                   %input.form-control{:id => form_control_id, :type => "text", :disabled => disabled,
      -#                   :name => column_name, :class => clazz}
      -#                 - when :date
      -#                   %input.datepicker.form-control{:id => form_control_id, :type => "text",
      -#                   :name => column_name, :class => clazz}
      -#
      -#       .modal-footer
      -#         %button.btn.btn-default.btn-cancel{"data-dismiss" => "modal", :type => "button"} Cancel
      -#         %button.btn.btn-danger.btn-submit{:type => "button", disabled: true} Save
